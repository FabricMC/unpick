plugins {
	id 'java-library'
	id 'maven-publish'
	id 'eclipse'
	id 'checkstyle'
	id 'com.diffplug.spotless' version '7.0.2'
}

repositories {
	mavenCentral()
}

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'checkstyle'
	apply plugin: 'com.diffplug.spotless'

	group = 'net.fabricmc.unpick'

	def ENV = System.getenv()
	version = "3.0.0-beta.11"
	version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

	repositories {
		mavenCentral()
	}

	dependencies {
		api 'org.ow2.asm:asm:9.6'
		api 'org.ow2.asm:asm-tree:9.6'
		implementation 'org.ow2.asm:asm-commons:9.6'
		implementation 'org.ow2.asm:asm-util:9.6'
		compileOnly 'org.jetbrains:annotations:24.0.0'

		// Use JUnit test framework
		testImplementation platform('org.junit:junit-bom:5.10.1')
		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testImplementation 'org.junit.jupiter:junit-jupiter-params'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		testCompileOnly 'org.jetbrains:annotations:24.0.0'
	}

	test {
		useJUnitPlatform()
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"

		it.options.release = 21
	}

	java {
		withSourcesJar()
		sourceCompatibility = 21
		targetCompatibility = 21
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		archiveClassifier = 'javadoc'
		from javadoc.destinationDir
	}

	checkstyle {
		toolVersion = '10.21.1'
		configFile = rootProject.file("checkstyle.xml")
		ignoreFailures = false
	}

	spotless {
		lineEndings = com.diffplug.spotless.LineEnding.UNIX

		java {
			removeUnusedImports()
			importOrder('java', 'javax', '', 'daomephsta.unpick')
			leadingSpacesToTabs()
			trimTrailingWhitespace()
			toggleOffOn()
		}
	}

	if (!project.name.startsWith('test-data')) {
		publishing {
			repositories {
				if (ENV.MAVEN_URL) {
					repositories.maven {
						name "fabric"
						url ENV.MAVEN_URL
						credentials {
							username ENV.MAVEN_USERNAME
							password ENV.MAVEN_PASSWORD
						}
					}
				}
			}
			publications {
				mavenJava(MavenPublication) {
					from components.java
					artifact(javadocJar)
				}
			}
		}
	}
}

dependencies {
	implementation project(':unpick-format-utils')
}

test {
	dependsOn tasks.getByPath(':test-data:classes')
	dependsOn tasks.getByPath(':test-data-expected:classes')
	systemProperties testData: project(':test-data').sourceSets.main.java.destinationDirectory.get().asFile.absolutePath,
		testDataExpected: project(':test-data-expected').sourceSets.main.java.destinationDirectory.get().asFile.absolutePath
}
