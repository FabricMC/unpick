plugins {
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
	id 'com.diffplug.spotless' version '7.0.2' apply false
}

if (JavaVersion.current().java11Compatible) {
	apply plugin: 'checkstyle'
}

repositories {
	mavenCentral()
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    if (JavaVersion.current().java11Compatible) {
        apply plugin: 'checkstyle'
		apply plugin: 'com.diffplug.spotless'

        checkstyle {
            toolVersion = '10.21.1'
            configFile = rootProject.file("checkstyle.xml")
            ignoreFailures = false
        }

		spotless {
			lineEndings = com.diffplug.spotless.LineEnding.UNIX

			java {
				removeUnusedImports()
				importOrder('daomephsta.unpick', 'org.jetbrains.annotations', 'org.objectweb.asm', '', 'java', 'javax')
				leadingSpacesToTabs()
				trimTrailingWhitespace()
				endWithNewline()
			}
		}
    }

    group = 'net.fabricmc.unpick'

    def ENV = System.getenv()
    version = "2.3.1"
    version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

    repositories {
        mavenCentral()
    }

    dependencies {
        api 'org.ow2.asm:asm:9.6'
        api 'org.ow2.asm:asm-tree:9.6'
        implementation 'org.ow2.asm:asm-commons:9.6'
        implementation 'org.ow2.asm:asm-util:9.6'
        compileOnly 'org.jetbrains:annotations:24.0.0'

        // Use JUnit test framework
        testImplementation platform('org.junit:junit-bom:5.10.1')
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"

        if (JavaVersion.current().isJava9Compatible()) {
            it.options.release = 8
        }
    }

    java {
        withSourcesJar()
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    if (!project.name.startsWith('test-data')) {
        publishing {
            repositories {
                if (ENV.MAVEN_URL) {
                    repositories.maven {
                        name "fabric"
                        url ENV.MAVEN_URL
                        credentials {
                            username ENV.MAVEN_USERNAME
                            password ENV.MAVEN_PASSWORD
                        }
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact(javadocJar)
                }
            }
        }
    }
}

dependencies {
    implementation project(':unpick-format-utils')
}

test {
    dependsOn tasks.getByPath(':test-data:classes')
    dependsOn tasks.getByPath(':test-data-expected:classes')
    systemProperties testData: project(':test-data').sourceSets.main.java.destinationDirectory.get().asFile.absolutePath,
        testDataExpected: project(':test-data-expected').sourceSets.main.java.destinationDirectory.get().asFile.absolutePath
}
